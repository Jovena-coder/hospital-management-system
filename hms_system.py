# -*- coding: utf-8 -*-
"""HMS_System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Vsp5HRPzSl7mcvHMZGKlq9nKFg2VK3W6
"""

#Bass Class
class Person:
  def __init__(self, name, age, gender):
    if age < 0:
      raise ValueError("An age can not be negative.")
    self.name = name
    self.age = age
    self.gender = gender

  def display(self):
    return f"Name: {self.name}, Age: {self.age}, Gender: {self.gender}"

#Patient Class
class Patient(Person):
  id_counter = 1

  def __init__(self, name, age, gender):
      super().__init__(name, age, gender)
      self.patient_id = Patient.id_counter
      Patient.id_counter += 1
      self.appointments = []

  def view_profiles(self):
    return f"Patient ID: {self.patient_id}\n{self.display()}"

#Doctor class.
class Doctor(Person):
  id_counter = 1

  def __init__(self, name, age, gender, speciality, schedule):
    super().__init__(name, age, gender)
    self.doctor_id = Doctor.id_counter
    Doctor.id_counter += 1
    self.speciality = speciality
    self.schedule = schedule

  def is_available(self, date, time):
    return (date, time) in self.schedule

  def view_schedule(self):
    return f"Doctor {self.name}'s Schedule:\n" + "\n".join([f"{d} at {t}"
for d, t in self.schedule])

#Appointment Class.
class Appointment:
  id_counter = 1

  def __init__(self, patient, doctor, date, time):
    self.appointment_id = Appointment.id_counter
    Appointment.id_counter += 1
    self.patient = patient
    self.doctor = doctor
    self.date = date
    self.time = time
    self.status = "scheduled"

  def confirm(self):
    self.status = "confirmed"

  def cancel(self):
    self.status = "cancelled"

#Hospital System
class HospitalSystem:
  def __init__(self):
    self.patients = []
    self.doctors = []
    self.appointments = []

  def add_patient(self, name, age, gender):
    patient = Patient(name, age, gender)
    self.patients.append(patient)
    return patient

  def add_doctor(self, name, age, gender, speciality, schedule):
    doctor = Doctor(name, age, gender, speciality, schedule)
    self.doctors.append(doctor)
    return doctor

  def book_appointment(self, pid, did, date, time):
    pat = next((p for p in self.patients if p.patient_id == pid), None)
    doc = next((d for d in self.doctors if d.doctor_id == did), None)
    if not pat or not doc:
      raise LookupError("Patient or Doctor not found.")

    if not doc.is_available(date, time):
      raise ValueError("Doctor not available at this time")

    appt = Appointment(pat, doc, date, time)
    appt.confirm()
    self.appointments.append(appt)
    pat.appointments.append(appt)
    doc.schedule.remove((date, time))
    return appt

  def cancel_appointment(self, aid):
    appt = next((a for a in self.appointments if a.appointment_id == aid), None)
    if not appt:
      raise LookupError("Appointment not found.")
    appt.cancel()

  def generate_bill(self, aid, extra_fees=None):
    appt = next((a for a in self.appointments if a.appointment_id == aid), None)
    if not appt:
      raise LookupError("Appointment not found.")
    extras = extra_fees or []
    total = 3000 + sum(extras)
    receipt = (
        f"\n=== HOSPITAL BILL ===\n"
        f"Appointment ID: {aid}\n"
        f"Consultation Fee: JMD$3000\n"
        f"Extra Services: {extras}\n"
        f"TOTAL AMOUNT: JMD${total}\n"
        f"====================\n"
    )
    return receipt

hs = HospitalSystem()

#Add one patient.
name = input("Enter patient name: ")
age = int(input("Enter patient age: "))
gender = input("Enter patient gender: ")

p1 = hs.add_patient(name, age, gender)
print(p1.view_profiles())

#Add a Doctor
name = input("Enter doctor name: ")
age = int(input("Enter doctor age: "))
gender = input("Enter doctor gender: ")
speciality = input("Enter doctor speciality: ")

schedule = []
print("Enter available time slots(YYYY-MM-DD, HH:MM), one at a time. Press Enter when finished.")
while True:
  slot = input("Slot:")
  if slot == "":
    break
  parts = slot.split(',')
  if len(parts) == 2:
    date = parts[0].strip()
    time = parts[1].strip()
    schedule.append((date, time))
  else:
    print("Invalid slot format. Please use YYYY-MM-DD, HH:MM")


d1 = hs.add_doctor(name, age, gender, speciality, schedule)
print(f"Doctor ID: {d1.doctor_id}")
print(d1.display())

#Book an Appointment.
print("Booking appointment...")
pid = int(input("Enter patient ID: "))
did = int(input("Enter doctor ID: "))
date_time_str = input("Enter appointment date and time (YYYY-MM-DD, HH:MM): ")

# Split the input by comma and space, then strip whitespace
date, time = [part.strip() for part in date_time_str.split(',')]

appt = hs.book_appointment(pid, did, date, time)
print(f"Appointment confirmed. ID: {appt.appointment_id}, Status: {appt.status}")

#Cancel Appointment.
aid = int(input("Enter appointment ID to cancel: "))
hs.cancel_appointment(aid)
print("Appointment cancelled.")

#Generate Bill.
aid = int(input("Enter appointment ID for bill: "))
extras_input = input("Enter extra fees seperated by commas (e.g. 500, 200): ")

if extras_input:
  extras_fees = list(map(int, extras_input.split(',')))
else:
  extras_fees = []

print(hs.generate_bill(aid, extras_fees))